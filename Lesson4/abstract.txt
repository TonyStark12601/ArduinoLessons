Урок #4
В этом уроке мы рассмотрим временные функции и особенности их использования.
Начнем с задержек - они очень просты в понимании.
1--------------------------------------------------------------------------
void setup()
{
    Serial.begin(9600);
    Serial.println("Hello");
    delay(1000);//эта функция задержки , принимает число миллисекунды 
    //В 1 секунде - 1000 миллисекунд. Максимальное значение 4.294.967.295 мс,
    //или около 1200 часов , или 50 суток
    Serial.println("1 second");
    delay(2000);
    Serial.println("2 second");
    delay(3000);
    Serial.println("3 second");

    delayMicroseconds(1000);//приостанавливает работу в микросекундах, 
    //1 секунда - 1000000 микросекунд, максимальное значение 16383 мкс
    

}

void loop()
{

}
---------------------------------------------------------------------------
  Классический пример задержек - это мигание светодиодом, но взрослые ардуинщики очень не любят задержки типа delay();  - т.к. она полностью тормозит микроконроллер , программа полностью застывает на месте , для мигалок - этот вариант подходит, но для больших и серьезных проектов - нет т.к. лишние перебои в работе нам не нужны, поэтому рассмотрим следующую пару функция - это  millis() - возвращает количество микросекунд с момента запуска микроконроллера переполняется через 50 суток и micros() - делает то же самое что и millis , но в микросекундах и переполняется через 70 минут, при переполнении счетчик просто збрасывается в 0, разрешение функции micros составляет 4 микросекунды , то есть значение все время кратно 4- как это использовать спросите вы? довольно просто - сейчас мы будем решать проблему функции delay.

2---------------------------------------------------------------------------------
unsigned long last_time;//она будет хранить предидущее обращение,
 //к функции millis , то есть его число может достигать 4млрд 

void setup()
{
  Serial.begin(9600);
}

void loop()
{
  if(millis() - last_time > 5000)
  {
    last_time = millis();
    //эта конструкция аналогично команде  delay(5000); 
    //но в отличии от нее не тормозит остальной код то есть наш блок будет выполняться каждые 5 секунд
    //в не зависимости от остального кода прошивки.Эта конструкция очень полезна
    Serial.println("kek)");
  }
}
---------------------------------------------------------------------------------
Что касается времени - то задавать можно произведением, например хочу исполнять функцию каждые 23 дня , переводим в миллисекунды 23дня * 24 часа в сутках * 60 минут * 60 секунд * 1000 миллисекунд в ожной секунде = полученное значение будет в миллисекундах.

3--------------------------------------------------------------------------------
unsigned long last_time;

void setup()
{
  Serial.begin(9600);
}

void loop()
{
  if(millis() - last_time > (unsigned long) 23 * 24 * 60 * 60 * 1000)
  {
    last_time = millis();
    Serial.println("kek)");
    //теперь этот блок будет выполняться раз в 23 дня , а остальной код программа
    //будет спокойно себе выполнять параллельно таким образом можно 
    //организовать полив растений, кормежку животных и многое многое другое ,
    //грубо говоря это просто циклический таймер
  }
}
------------------------------------------------------------------------------

4-----------------------------------------------------------------------------
void setup()
{
  Serial.begin(9600);
}

void loop()
{
    if(round(millis() / 1000) % 2 == 0)
    {
      Serial.println("Четная секунда работы!");
    }
    else
    {
      Serial.println("Нечетная секунда работы!");
    }
}
------------------------------------------------------------------------------

5----------------------------------------------------------------------------
unsigned long last_time = 0;
void setup()
{
  Serial.begin(9600);
}

void loop()
{

  if(millis() - last_time > 1000)
  {
    last_time = millis();

    if(round(millis() / 1000) % 2 == 0)
    {
      Serial.println("Четная секунда работы!");
    }
    else
    {
      Serial.println("Нечетная секунда работы!");
    }
  }
}
-----------------------------------------------------------------------------
  Есть еще одна штука со временем - это использование встроенного таймера Arduino,
уход самой Arduino в спячку с низким потреблением электроэнергии и просыпание по таймеру, но эта тема для отдельного выпуска .
